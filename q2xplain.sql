
WITH CURRENT_POLICIES AS ( 
    SELECT EP.POL_NUMBER, EP.END_STATUS_HID,EP.END_NUMBER, EP.POL_POLICY_SID, EP.TECHNICALIDENTIFIER AS LAST_END_TID, COALESCE (EP.FULL_PREVIOUS_TID, EP.TECHNICALIDENTIFIER) AS STRUCTURAL_END_TID 
    FROM ENDPOLICY EP 
	  WHERE pol_current_endpol='true' and EP.END_STATUS_EID='VALIDATED' 
), 
POL_SIGN_DATE AS ( 
SELECT 
    DISTINCT EP.POL_NUMBER AS POL_NUMBER, 
    CASE 
        WHEN DD.ReqDocInfo_ReceptionDate IS NULL then 'false' 
        ELSE 'true' END AS CPSIGNEE, 
    DD.ReqDocInfo_ReceptionDate as DATECPSIGNEE 
FROM 
    ENDPOLICY EP 
    LEFT JOIN (ENDPOLICY_DOCUMENTS ED 
    INNER JOIN DOCUMENT D ON D.TECHNICALIDENTIFIER = ED.DOCUMENT_TID 
    INNER JOIN DOCUMENT_DOCSPEC DD ON DD.PARENT_OID = D.TECHNICALIDENTIFIER 
        AND DD.specimentype_eid = 'Original' 
    INNER JOIN ADMINISTRATIVEDOCUMENT AD ON AD.TECHNICALIDENTIFIER = D.DOCUMENTMETADATA_TID 
        AND AD.REFERENCE = 'CPCPSIGNBO') 
    ON EP.TECHNICALIDENTIFIER=ED.PARENT_OID 
    WHERE EP.END_TYPE_EID IN ('SUBSCRIPTION', 'MIGRATION') 
    and EP.END_STATUS_EID='VALIDATED' 
), 
PAYSTAT AS ( 
SELECT 
    paystat.POLICY_TID, 
    MAX(paystat.REMIND_STATUS) AS REMIND_STATUS FROM 
(select 
    CASE 
        WHEN B.REMINDERSTATUS_EID IS NULL THEN 0 
        WHEN B.REMINDERSTATUS_EID = 'REM_1ST' THEN 1 
        WHEN B.REMINDERSTATUS_EID = 'REM_2ND' THEN 2 
        WHEN B.REMINDERSTATUS_EID = 'LEGAL_SUSP' THEN 3 
        WHEN B.REMINDERSTATUS_EID = 'TECH_SUSP' THEN 4 
    END as REMIND_STATUS, 
    B.POLICY_TID 
from BILL B) paystat 
group by paystat.POLICY_TID 
), 
POLICY_EVAL AS ( 
    SELECT DISTINCT 
    PB.VALUATIONDATE AS VALUATION_DATE, 
    SUM(PB.AMOUNTFININSTCURRENCY) AS EVAL, 
    E.Pol_Number AS IDPOLICE 
FROM POLICYDAILYFININSTBALANCE PB 
    INNER JOIN (SELECT DISTINCT POL_POLICY_SID, POL_NUMBER FROM ENDPOLICY) E ON E.POL_POLICY_SID = PB.POLICY_TID 
    WHERE PB.VALUATIONDATE = (SELECT MAX(PB2.VALUATIONDATE)FROM POLICYDAILYFININSTBALANCE PB2 WHERE PB2.Policy_TID = E.POL_POLICY_SID) 
    AND PB.POSITIONVIEWTYPE_BID = '5231:2' 
    GROUP BY PB.VALUATIONDATE, E.Pol_Number 
), 
MAX_DATE AS (  
                SELECT E2.Pol_Policy_SID as TECH_ID_POL, max(B2.STARTDATE) as BILL_DATE FROM BILL B2  
                INNER JOIN CURRENT_POLICIES E2 on E2.Pol_Policy_SID = B2.Policy_TID  
                WHERE B2.BillStatus_EID NOT IN ('NEW', 'SCHEDULED' , 'CANCELLED') group by E2.Pol_Policy_SID  
), 
CLASSES AS ( 
		SELECT DISTINCT e.TECHNICALIDENTIFIER AS ID_POLICE, DECODE(f.FUND_NUMBER, NULL, f.FINANCIALINSTRUMENTLABEL, f.FUND_NUMBER) AS idfonds, 
		CASE 
			WHEN f.FININST_CLASS_EID ='GR' THEN 'GR' 
			WHEN f.FININST_CLASS_EID ='DED' THEN 'FD' 
			ELSE 'MS' 
		END as CLASSEFONDS 
		FROM policydailyfininstbalance p 
		INNER JOIN endpolicy e ON e.pol_policy_sid = p.policy_tid 
		INNER JOIN financialinstrument f ON f.technicalidentifier = p.financialinstrument_tid 
		INNER JOIN current_policies cp ON e.pol_number=cp.pol_number 
		WHERE p.positionviewtype_bid = '5231:2' AND F.STATUS_EID='FORCE'
	), 
	CLASSESNOMBRE AS ( 
		SELECT c.ID_POLICE, 
		COUNT (c.ID_POLICE) as NOMBRE_DIFF_CLASSE_FONDS 
		FROM CLASSES c 
		GROUP BY c.ID_POLICE 
	), 
	CLASSESRESULTAT AS ( 
		SELECT c.ID_POLICE, 
		CASE WHEN NOMBRE_DIFF_CLASSE_FONDS = 1 THEN c.CLASSEFONDS ELSE 'MS' END AS CLASSEFONDSINVESTI 
		FROM CLASSES c 
		INNER JOIN CLASSESNOMBRE cn ON cn.ID_POLICE = c.ID_POLICE 
		GROUP BY c.ID_POLICE, CASE WHEN NOMBRE_DIFF_CLASSE_FONDS = 1 THEN c.CLASSEFONDS ELSE 'MS' END 
) 
SELECT DISTINCT 
E.POL_NUMBER, 
CR.CLASSEFONDSINVESTI, 
P.CODE, 
EP.PRSTRPRODUCTLINE_VAL as LIGNEMETIER, 
POL_STATUS_EID AS EXTERNALID, 
C.ISOCODE, 
E.PAYMENTMODE_EID AS VALUE, 
E.POL_EFFECTIVEDATE, 
E.POL_TERMDATE, 
CASE 
    WHEN E.PERIODICITY_EID = 'MON' THEN ADD_MONTHS(MAX_DATE.BILL_DATE,1) 
    WHEN E.PERIODICITY_EID = 'QUA' THEN ADD_MONTHS(MAX_DATE.BILL_DATE,3) 
    WHEN E.PERIODICITY_EID = 'SEM' THEN ADD_MONTHS(MAX_DATE.BILL_DATE,6) 
    WHEN E.PERIODICITY_EID = 'ANN' THEN ADD_MONTHS(MAX_DATE.BILL_DATE,12) 
END AS MODIFIEDDATE, 
E.POL_COUNTRYOFLAW_EID AS FISCALITE, 
EP.DURATION_VAL, 
EP.DURATIONUNIT_EID AS UNITEDUREE, 
ECF.POSTRIDDISTRIBUTOR_VAL, 
ECF.POBOOMANDATINTERMEDIATION_VAL, 
ECF.POSTRCIRCULARLETTER_VAL, 
PSD.CPSIGNEE, 
PSD.DATECPSIGNEE AS DATECPSIGNEE, 
ECF.POSTRMODEENVCOURRIER_VAL, 
EACC.IBAN, 
PAYSTAT.REMIND_STATUS AS STATUTPAYMENT, 
POLICY_EVAL.EVAL AS EVAL, 
ECF.POSTRBULLETINSOUS_VAL, 
CASE 
    WHEN pol_enddate BETWEEN CURRENT_DATE AND ADD_MONTHS(CURRENT_DATE, -6) and E.POL_STATUS_EID in ('CANC', 'CLAIMED', 'CLOSE', 'DEATH_CL', 'INAC', 'NOTPROC', 'RENUNC', 'SURREN', 'TERM', 'TRANSF') THEN 'false' 
    WHEN pol_enddate BETWEEN CURRENT_DATE AND ADD_MONTHS(CURRENT_DATE, -6) and E.POL_STATUS_EID in ('SURREN') THEN 'true' 
    WHEN E.POL_STATUS_EID in ('FORCE') THEN 'true' 
ELSE 'false' 
END AS VISIBLEEXTERIEUR, 
CASE WHEN EI.INDEXATIONTYPE_EID = 'FISCAL_GAIN' THEN 'true' ELSE 'false' END AS MAXIMUMDEDUCTIBLE, 
EP.PRSTRPRODUCTCODE_VAL AS OLDCODEPRODUIT, 
ID.identifier as STRATEGIEINVESTISSEMENT, 
coalesce(ECF.poStrCommercialLabel_VAL, DISTRIBUTIONNETWORK_PRODUCT.COMMERCIALNAME, p.name) as LIBELLEPRODUITLABELLISE 
FROM 
CURRENT_POLICIES CP 
INNER JOIN ENDPOLICY E ON CP.STRUCTURAL_END_TID = E.TECHNICALIDENTIFIER 
LEFT JOIN ENDPOLICY_CF ECF on ECF.PARENT_OID = E.TECHNICALIDENTIFIER  
INNER JOIN PRODUCT P on P.TECHNICALIDENTIFIER = E.POL_PRODUCT_TID 
LEFT JOIN CURRENCY C on C.TECHNICALIDENTIFIER = E.POL_CURRENCY_TID 
LEFT JOIN (RoleToRoleTarget RT INNER JOIN RolePayer RP On RP.TECHNICALIDENTIFIER = RT.Role_TID) 
    ON RT.Role_Target_TID = CP.POL_POLICY_SID 
LEFT JOIN EXTERNALACCOUNT EACC On EACC.OWNER_TID = RP.TECHNICALIDENTIFIER 
LEFT JOIN ENDPOLICY_PRODUCTPAR EP on EP.PARENT_OID = E.TECHNICALIDENTIFIER 
LEFT JOIN POL_SIGN_DATE PSD ON PSD.POL_NUMBER = CP.POL_NUMBER 
LEFT JOIN PAYSTAT ON CP.POL_POLICY_SID = PAYSTAT.POLICY_TID 
LEFT JOIN POLICY_EVAL ON CP.POL_NUMBER = POLICY_EVAL.IDPOLICE 
LEFT JOIN ENDPOLICY_INDEXSETTING EI ON EI.parent_OID = E.TECHNICALIDENTIFIER 
LEFT JOIN CLASSESRESULTAT CR ON CR.ID_POLICE = E.TECHNICALIDENTIFIER 
LEFT JOIN ENDCOVERAGE on endcoverage.EndorsedPolicy_TID = CP.STRUCTURAL_END_TID and InvCov_InvestmentStrategy_TID is not null 
LEFT JOIN INVSTRAT on ENDCOVERAGE.InvCov_InvestmentStrategy_TID = INVSTRAT.TECHNICALIDENTIFIER 
LEFT JOIN INVSTRATDEF ID on InvestStrategyDefinition_TID = ID.TECHNICALIDENTIFIER 
LEFT JOIN ROLETOROLETARGET RT2 on (RT2.ROLE_TARGET_TID = E.TECHNICALIDENTIFIER)
LEFT JOIN BROKER on (BROKER.TECHNICALIDENTIFIER = RT2.ROLE_TID)
LEFT JOIN DISTRIBUTIONNETWORK_STRUCT on (DISTRIBUTIONNETWORK_STRUCT.DISTRIBUTIONPARTNER_TID = BROKER.TECHNICALIDENTIFIER)
LEFT JOIN DISTRIBUTIONNETWORK on (DISTRIBUTIONNETWORK.TECHNICALIDENTIFIER = DISTRIBUTIONNETWORK_STRUCT.PARENT_OID)
LEFT JOIN DISTRIBUTIONNETWORK_PRODUCT on (DISTRIBUTIONNETWORK_PRODUCT.PARENT_OID = DISTRIBUTIONNETWORK.TECHNICALIDENTIFIER 
        AND DISTRIBUTIONNETWORK_PRODUCT.PRODUCT_TID = P.TECHNICALIDENTIFIER) 
LEFT JOIN MAX_DATE ON CP.POL_POLICY_SID = MAX_DATE.TECH_ID_POL;